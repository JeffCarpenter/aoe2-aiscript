return {
  // Set defaultToken to invalid to see what you do not tokenize yet
  // defaultToken: 'invalid',

  keywords: [
    'defrule','defconst','load','load-random','disable-self','defconst'
  ],

  facts: [
    'true', 'false', 'can-build', 'or', 'and', 'not'
  ],


  actions: [
    'build'
  ],

  typeKeywords: [
    
  ],

  operators: [
    '=', '>', '<', '==', '<=', '>=', '!=', '=>', 
  ],

  // we include these common regular expressions
  symbols:  /[=><!]+/,

  // The main tokenizer for our languages
  tokenizer: {
    root: [
      // identifiers and keywords
      [/[a-z_$\-]+/, { cases: { '@typeKeywords': 'keyword',
                                    '@facts': 'keyword',
                                    '@actions': 'keyword',
                                   '@keywords': 'keyword',
                                   '@default': 'identifier' } }],

      // whitespace
      { include: '@whitespace' },

      // delimiters and operators
      [/[()]/, '@brackets'],
      [/(?!@symbols)/, '@brackets'],
      [/@symbols/, { cases: { '@operators': 'operator',
                              '@default'  : '' } } ],

      // @ annotations.
      // As an example, we emit a debugging log message on these tokens.
      // Note: message are supressed during the first load -- change some lines to see them.
      [/@\s*[a-zA-Z_\$][\w\$]*/, { token: 'annotation', log: 'annotation token: $0' }],

      // numbers
      [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
      [/0[xX][0-9a-fA-F]+/, 'number.hex'],
      [/\d+/, 'number'],

      // delimiter: after number because of .\d floats
      [/[\s\n\t\r]/, 'delimiter'],

      // strings
      [/"([^"\\]|\\.)*$|'[^\\']/, 'string.invalid' ],  // non-teminated string
      [/"/,  { token: 'string.quote', bracket: '@open', next: '@string' } ],

    ],

    comment: [
       [/((^;).*)/, 'comment'],
      [/((^;).*)/, 'comment', '@push'],
      [/($\n?)/, 'comment', '@pop'],
      [/($\n*)/, 'comment']

    ],

    string: [
      [/[^\\"]+/,  'string'],
      [/"/,        { token: 'string.quote', bracket: '@close', next: '@pop' } ]
    ],

    whitespace: [
      [/[ \t\r]+/, 'white'],
      [/(^;).*/, 'comment'],
      [/(($\n?))/, 'comment'],

    ],
  }
}